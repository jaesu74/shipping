name: Deploy to Google App Engine

on:
  push:
    branches:
      - main  # 또는 master 등 메인 브랜치명

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: fresh-edge-451807-h7  # 실제 GCP 프로젝트 ID

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: cd backend && npm install

    - name: Prepare backend files
      run: |
        cd backend
        # public 디렉토리가 존재하는지 확인하고, 없으면 생성
        if [ ! -d "public" ]; then
          mkdir -p public
        fi
        
        # index.html 파일이 존재하는지 확인하고, 없으면 생성
        if [ ! -f "public/index.html" ]; then
          cat > public/index.html << EOF
          <!DOCTYPE html>
          <html lang="ko">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>해운 데이터 서비스</title>
              <style>
                  body {
                      font-family: 'Arial', sans-serif;
                      line-height: 1.6;
                      margin: 0;
                      padding: 20px;
                      color: #333;
                      max-width: 800px;
                      margin: 0 auto;
                  }
                  h1 {
                      color: #0066cc;
                      border-bottom: 2px solid #0066cc;
                      padding-bottom: 10px;
                  }
                  .status {
                      background-color: #e6f7ff;
                      border-left: 4px solid #0066cc;
                      padding: 10px 15px;
                      margin: 20px 0;
                  }
              </style>
          </head>
          <body>
              <h1>해운 데이터 백엔드 서버</h1>
              <div class="status">
                  <p><strong>상태:</strong> 실행 중</p>
                  <p>이 페이지가 보이면 백엔드 서버가 정상적으로 작동하고 있습니다.</p>
              </div>
              
              <h2>API 엔드포인트</h2>
              <ul>
                  <li><code>/</code> - 서버 상태 확인</li>
                  <li><code>/api/status</code> - API 상태 확인</li>
                  <li><code>/api/indices</code> - 해운 지수 데이터</li>
              </ul>
              
              <p><small>© 2024 SHIPPING Project</small></p>
          </body>
          </html>
          EOF
        fi
        
        # app.yaml 파일에 정적 파일 핸들러 추가 확인
        echo "Listing directory contents to verify files:"
        ls -la
        echo "Listing public directory contents:"
        ls -la public/

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        create_credentials_file: true

    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v1

    - name: Set project ID
      run: gcloud config set project ${{ env.PROJECT_ID }}

    - name: Verify gcloud configuration
      run: |
        gcloud --version
        gcloud config list
        gcloud auth list

    # 참고: 다음 작업을 Google Cloud Console에서 수동으로 완료해야 합니다:
    # 1. 필요한 API 활성화:
    #    - App Engine API (appengine.googleapis.com)
    #    - Cloud Build API (cloudbuild.googleapis.com)
    #    - Cloud Resource Manager API (cloudresourcemanager.googleapis.com)
    # 2. App Engine 애플리케이션 생성:
    #    - App Engine 메뉴에서 "앱 만들기" 선택
    #    - 리전으로 "asia-northeast3" (서울) 선택
    #    - 안내에 따라 진행

    - name: Create app.yaml configuration
      run: |
        cd backend
        ls -la
        echo "Creating app.yaml for deployment"
        cat > app.yaml << EOF
        runtime: nodejs18
        # 첫 번째 배포는 반드시 'default' 서비스여야 합니다
        # service: backend-api
        env_variables:
          PORT: 8080
        entrypoint: node server.js
        
        # Automatic scaling configuration
        automatic_scaling:
          max_instances: 5  # Maximum number of instances
          min_instances: 0  # Minimum number of instances
          
        handlers:
        # 정적 파일 핸들러
        - url: /static
          static_dir: public/static
          
        # 정적 파일 핸들러 (특정 파일)
        - url: /(.*\.(html|css|js|png|jpg|jpeg|gif|ico))
          static_files: public/\1
          upload: public/.*\.(html|css|js|png|jpg|jpeg|gif|ico)
          
        # 모든 요청은 서버로 전달
        - url: /.*
          script: auto
        EOF
        
        echo "app.yaml content:"
        cat app.yaml

    - name: Deploy to App Engine
      id: deploy
      run: |
        cd backend
        echo "Running gcloud app deploy"
        gcloud app deploy --quiet --project=${{ env.PROJECT_ID }} --verbosity=debug 