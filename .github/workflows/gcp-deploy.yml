name: Deploy to Google App Engine

on:
  push:
    branches:
      - main  # 또는 master 등 메인 브랜치명

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: fresh-edge-451807-h7  # 실제 GCP 프로젝트 ID

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: cd backend && npm install

    - name: Prepare backend files
      run: |
        cd backend
        # public 디렉토리가 존재하는지 확인하고, 없으면 생성
        if [ ! -d "public" ]; then
          mkdir -p public
        fi
        
        # 간단한 index.html 파일 생성
        if [ ! -f "public/index.html" ]; then
          echo '<!DOCTYPE html>' > public/index.html
          echo '<html><head><title>해운 데이터 서비스</title></head>' >> public/index.html
          echo '<body style="font-family:Arial; margin:20px;">' >> public/index.html
          echo '<h1 style="color:#0066cc;">해운 데이터 백엔드 서버</h1>' >> public/index.html
          echo '<div style="background:#e6f7ff; border-left:4px solid #0066cc; padding:10px;">' >> public/index.html
          echo '<p><strong>상태:</strong> 실행 중</p>' >> public/index.html
          echo '<p>이 페이지가 보이면 백엔드 서버가 정상적으로 작동하고 있습니다.</p>' >> public/index.html
          echo '</div><h2>API 엔드포인트</h2><ul>' >> public/index.html
          echo '<li><code>/</code> - 서버 상태 확인</li>' >> public/index.html
          echo '<li><code>/api/status</code> - API 상태 확인</li>' >> public/index.html
          echo '<li><code>/api/indices</code> - 해운 지수 데이터</li>' >> public/index.html
          echo '</ul><p><small>© 2024 SHIPPING Project</small></p>' >> public/index.html
          echo '</body></html>' >> public/index.html
        fi
        
        # 파일 확인
        echo "Listing directory contents to verify files:"
        ls -la
        echo "Listing public directory contents:"
        ls -la public/

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        create_credentials_file: true

    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v1

    - name: Set project ID
      run: gcloud config set project ${{ env.PROJECT_ID }}

    - name: Verify gcloud configuration
      run: |
        gcloud --version
        gcloud config list
        gcloud auth list

    # 참고: 다음 작업을 Google Cloud Console에서 수동으로 완료해야 합니다:
    # 1. 필요한 API 활성화:
    #    - App Engine API (appengine.googleapis.com)
    #    - Cloud Build API (cloudbuild.googleapis.com)
    #    - Cloud Resource Manager API (cloudresourcemanager.googleapis.com)
    # 2. App Engine 애플리케이션 생성:
    #    - App Engine 메뉴에서 "앱 만들기" 선택
    #    - 리전으로 "asia-northeast3" (서울) 선택
    #    - 안내에 따라 진행

    - name: Create app.yaml configuration
      run: |
        cd backend
        # app.yaml 파일 생성
        echo 'runtime: nodejs18' > app.yaml
        echo '# 첫 번째 배포는 반드시 default 서비스여야 합니다' >> app.yaml
        echo '# service: backend-api' >> app.yaml
        echo 'env_variables:' >> app.yaml
        echo '  PORT: 8080' >> app.yaml
        echo 'entrypoint: node server.js' >> app.yaml
        echo '' >> app.yaml
        echo '# Automatic scaling configuration' >> app.yaml
        echo 'automatic_scaling:' >> app.yaml
        echo '  max_instances: 5  # Maximum number of instances' >> app.yaml
        echo '  min_instances: 0  # Minimum number of instances' >> app.yaml
        echo '' >> app.yaml
        echo 'handlers:' >> app.yaml
        echo '# 정적 파일 핸들러' >> app.yaml
        echo '- url: /static' >> app.yaml
        echo '  static_dir: public/static' >> app.yaml
        echo '' >> app.yaml
        echo '# 정적 파일 핸들러 (특정 파일)' >> app.yaml
        echo '- url: /(.*\.(html|css|js|png|jpg|jpeg|gif|ico))' >> app.yaml
        echo '  static_files: public/\1' >> app.yaml
        echo '  upload: public/.*\.(html|css|js|png|jpg|jpeg|gif|ico)' >> app.yaml
        echo '' >> app.yaml
        echo '# 모든 요청은 서버로 전달' >> app.yaml
        echo '- url: /.*' >> app.yaml
        echo '  script: auto' >> app.yaml
        
        echo "app.yaml content:"
        cat app.yaml

    - name: Deploy to App Engine
      id: deploy
      run: |
        cd backend
        echo "Running gcloud app deploy"
        gcloud app deploy --quiet --project=${{ env.PROJECT_ID }} --verbosity=debug 