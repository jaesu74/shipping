name: Deploy to Google App Engine

on:
  push:
    branches:
      - main  # 또는 master 등 메인 브랜치명

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: fresh-edge-451807-h7  # 실제 GCP 프로젝트 ID

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: cd backend && npm install

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        create_credentials_file: true

    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v1

    - name: Set project ID
      run: gcloud config set project ${{ env.PROJECT_ID }}

    - name: Verify gcloud configuration
      run: |
        gcloud --version
        gcloud config list
        gcloud auth list

    # 참고: 다음 API를 Google Cloud Console에서 수동으로 활성화해야 합니다:
    # - App Engine API (appengine.googleapis.com)
    # - Cloud Build API (cloudbuild.googleapis.com)
    # - Cloud Resource Manager API (cloudresourcemanager.googleapis.com)

    - name: Create App Engine application
      run: |
        # App Engine 애플리케이션이 존재하는지 확인
        APP_EXISTS=$(gcloud app describe --project=${{ env.PROJECT_ID }} 2>&1 | grep "serving:" || echo "")
        
        if [ -z "$APP_EXISTS" ]; then
          echo "Creating App Engine application in asia-northeast3 (Seoul) region"
          # 사용 가능한 리전: https://cloud.google.com/appengine/docs/locations
          gcloud app create --region=asia-northeast3 --project=${{ env.PROJECT_ID }}
        else
          echo "App Engine application already exists"
        fi

    - name: Create app.yaml configuration
      run: |
        cd backend
        ls -la
        echo "Creating app.yaml for deployment"
        cat > app.yaml << EOF
        runtime: nodejs18
        service: backend-api
        env_variables:
          PORT: 8080
        entrypoint: node server.js
        
        # Automatic scaling configuration
        automatic_scaling:
          max_instances: 5  # Maximum number of instances
          min_instances: 0  # Minimum number of instances
          
        handlers:
        - url: /.*
          script: auto
        EOF
        
        echo "app.yaml content:"
        cat app.yaml

    - name: Deploy to App Engine
      id: deploy
      run: |
        cd backend
        echo "Running gcloud app deploy"
        gcloud app deploy --quiet --project=${{ env.PROJECT_ID }} --verbosity=debug 