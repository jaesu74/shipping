name: Deploy to Google App Engine

on:
  push:
    branches:
      - main  # 또는 master 등 메인 브랜치명

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: fresh-edge-451807-h7  # 실제 GCP 프로젝트 ID

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Check directory structure
      run: |
        echo "현재 디렉토리 구조:"
        ls -la
        echo "public 디렉토리 내용:"
        ls -la public/ || echo "Public 디렉토리를 찾을 수 없습니다"
        echo "package.json 내용:"
        cat package.json

    - name: Prepare deployment files
      run: |
        # 기존 app.yaml 파일 백업
        if [ -f "app.yaml" ]; then
          cp app.yaml app.yaml.backup
        fi
        
        # app.yaml 파일 생성/업데이트
        cat > app.yaml << 'EOF'
        runtime: nodejs18
        env_variables:
          PORT: 8080
          NODE_ENV: production
        entrypoint: node server.js

        # Health check configuration
        liveness_check:
          path: "/api/status"
          check_interval_sec: 30
          timeout_sec: 4
          failure_threshold: 2
          success_threshold: 2

        # Automatic scaling configuration
        automatic_scaling:
          max_instances: 3
          min_instances: 1
          target_cpu_utilization: 0.65

        # 정적 파일 핸들러
        handlers:
        - url: /.*
          script: auto
        EOF
        
        # public/index.html 파일 백업 및 업데이트
        if [ -f "public/index.html" ]; then
          cp public/index.html public/index.html.backup
        fi
        
        # HTML 파일 생성
        cat > public/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>해운 데이터 서비스</title>
            <style>
                body { font-family: Arial; margin: 20px; }
                h1 { color: #0066cc; }
                .status { background: #e6f7ff; border-left: 4px solid #0066cc; padding: 10px; }
            </style>
        </head>
        <body>
            <h1>해운 데이터 백엔드 서버</h1>
            <div class="status">
                <p><strong>상태:</strong> 실행 중</p>
                <p>이 페이지가 보이면 백엔드 서버가 정상적으로 작동하고 있습니다.</p>
            </div>
            <h2>API 엔드포인트</h2>
            <ul>
                <li><code>/</code> - 서버 상태 확인</li>
                <li><code>/api/status</code> - API 상태 확인</li>
                <li><code>/api/indices</code> - 해운 지수 데이터</li>
            </ul>
            <p><small>© 2024 SHIPPING Project</small></p>
        </body>
        </html>
        EOF
        
        # server.js 파일 백업 및 업데이트
        if [ -f "server.js" ]; then
          cp server.js server.js.backup
        fi
        
        # 서버 파일 생성
        cat > server.js << 'EOF'
        // 간단한 Express 서버 - App Engine 배포용
        const express = require("express");
        const cors = require("cors");
        const path = require("path");

        const app = express();
        const PORT = process.env.PORT || 8080;

        // 미들웨어
        app.use(cors());
        app.use(express.json());
        app.use(express.static(path.join(__dirname, "public")));

        // 루트 경로
        app.get("/", (req, res) => {
          res.sendFile(path.join(__dirname, "public", "index.html"));
        });

        // API 상태 확인
        app.get("/api/status", (req, res) => {
          res.json({ status: "online", message: "Backend server is running." });
        });

        // 기본 데이터 응답
        app.get("/api/indices", (req, res) => {
          res.json([{
            date: new Date().toISOString().split("T")[0],
            indices: [
              {
                name: "BDI (Baltic Dry Index)",
                value: "1,432",
                change: "+15",
                source: "Baltic Exchange"
              }
            ]
          }]);
        });

        // 에러 핸들링
        app.use((err, req, res, next) => {
          console.error("Server Error:", err);
          res.status(500).json({ error: "Internal Server Error", message: err.message });
        });

        // 서버 시작
        app.listen(PORT, () => {
          console.log("Server running on port " + PORT);
        });
        EOF
        
        # 종속성 업데이트
        npm install express cors body-parser
        
        # 파일 확인
        echo "수정 후 파일 목록:"
        ls -la
        echo "public 디렉토리 내용:"
        ls -la public/

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        create_credentials_file: true

    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v1

    - name: Set project ID
      run: gcloud config set project ${{ env.PROJECT_ID }}

    - name: Verify gcloud configuration
      run: |
        gcloud --version
        gcloud config list
        gcloud auth list

    # 참고: 다음 작업을 Google Cloud Console에서 수동으로 완료해야 합니다:
    # 1. 필요한 API 활성화:
    #    - App Engine API (appengine.googleapis.com)
    #    - Cloud Build API (cloudbuild.googleapis.com)
    #    - Cloud Resource Manager API (cloudresourcemanager.googleapis.com)
    # 2. App Engine 애플리케이션 생성:
    #    - App Engine 메뉴에서 "앱 만들기" 선택
    #    - 리전으로 "asia-northeast3" (서울) 선택
    #    - 안내에 따라 진행

    - name: Deploy to App Engine
      id: deploy
      run: |
        gcloud app deploy --quiet --project=${{ env.PROJECT_ID }} 